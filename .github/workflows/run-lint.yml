# Implicit requirements
# runner must have `docker` and `curl` installed (true on github-runners)

name: tests

on:
  push:
    branches:
      - 'master'
  workflow_call:

jobs:
  golangci:
    name: golangci-lint
    concurrency:
      group: lint-golangci-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github

      - name: smart-checkout
        uses: ./.github/actions/smart-checkout
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.55.2
  autoformatter:
    name: autoformat check
    concurrency:
      group: lint-autoformat-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
      - name: smart-checkout
        uses: ./.github/actions/smart-checkout

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"

      - name: Install utilities
        run: |
          go install mvdan.cc/gofumpt@v0.3.1
          go install github.com/rinchsan/gosimports/cmd/gosimports@v0.1.5

      - name: format all files with auto-formatter
        run: bash ./.github/scripts/format-all-go-code.sh "$PWD"

      - name: Check repository diff
        run: bash ./.github/scripts/check-work-copy-equals-to-committed.sh "auto-format broken"
  tests:
    name: run tests
    concurrency:
      group: tests-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
      - name: smart-checkout
        uses: ./.github/actions/smart-checkout
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"
      - name: download dependencies
        run: |
          go mod download
          echo "$HOME/go/bin" >> $GITHUB_PATH
      - name: build ydbops
        run: go build
      - name: run tests
        run: go test -v -p 1 ./... -args -ginkgo.v 
